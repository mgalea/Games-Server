package shared;


/** A general abstract class to hold the Application settings and save/retrieve settings to file in the Key/Value pair in a Properties file format.  
 * 
 *  updatePropertiesFromSettings()+saveSettings():  Settings --->Properties File
 *  updateSettingsFromProperties()+ getSettings():  Settings<---Properties File
 *  
 *  
 *  Currently used by {@link GameServerParamters} to save Game Server Settings.
 * 
 * **/

import java.util.Properties;
import java.io.BufferedReader;
import java.io.BufferedWriter;


import java.io.FileReader;
import java.io.PrintWriter;

public abstract class Settings {

    private String propertiesFilename;
    private String propertiesDescription;    
    protected Properties properties = null;
    
/* CONSTRUCTORS  */
    protected Settings (String propertiesFilename, String propertiesDescription) {
	   
    	String folder = System.getProperty("user.dir");
	    String filesep = System.getProperty("file.separator");
    	
	    this.propertiesFilename = folder+ filesep+propertiesFilename;;
	    this.propertiesDescription = propertiesDescription;
    }

/*  SETTERS  */
/* These methods are declared abstract so they can be applied specific to the application */
    
    abstract protected void setDefaults(Properties defaults) ;
    abstract protected void updatePropertiesFromSettings() ;
    abstract protected void updateSettingsFromProperties() ;
 
    
   synchronized protected void getSettings() {
        Properties defaults = new Properties();

        /* Defaults have to generated by the application specific class. The class MUST have settings as part of its name */
        setDefaults(defaults);

        properties = new Properties(defaults);
        
        synchronized (getClass()){
	    BufferedReader in = null;
	    	try {

	    		in = new BufferedReader(new FileReader(propertiesFilename));   	    
         
	    		properties.load(in);

	    		} catch (java.io.FileNotFoundException e) {
	    			in = null;
	    			Messages.error("Can't find Properties file " + propertiesFilename.toString()+ "."
	    					+ " Using defaults.");
	    			saveSettings();
	    		} catch (java.io.IOException e) {
	    			Messages.error("Can't read settings from Properies file. " + propertiesFilename.toString()
	    					+ "Using defaults.");
	    		} finally {
	    			if (in != null) {
	    				try { in.close(); } catch (java.io.IOException e) {
	    					Messages.error("Can't Close Properties file. " + propertiesFilename.toString());
	    				}
	    				in = null;
	    }
	    		}
		
	/*  have to generated by the application specific class. The class MUST have settings as part of its name */
	updateSettingsFromProperties();
        }
      
    }
    
       
   synchronized protected void saveSettings() {
    
    /* have to generated by the application specific class. The class MUST have settings as part of its name */
	updatePropertiesFromSettings();

	    //Messages.info(this.getClass().getName(), "Set properties: " + propertiesDescription);
	    //Messages.info(toString());
		
	synchronized (getClass()){
    	 
        BufferedWriter out = null;

	try {
                    
            out = new BufferedWriter(new PrintWriter(propertiesFilename));          
            properties.store(out, propertiesDescription);
	    
	    
	} catch (java.io.IOException e) {
	    Messages.error("Can't save properties. " );
	} finally {
	    if (out != null) {
		try { out.close(); } catch (java.io.IOException e) { }
		out = null;
	    }
	}
    }
   }
}
